-- file: Fit.hs

import Data.List (minimumBy, inits, tails)
import Numeric.AD (grad)
import Numeric.AD.Types (auto)

type Point                    = (Double,Double)
type Function                 = (Double -> Double)
type Cost                     = Double
type CostFunction             = (Function -> Cost)
type Condition                = ([Coefficient] -> Bool)
type Coefficient              = Double
type CartesianCoord           = [Component]
type Component                = Double
type PolarCoord               = [Double]
type Angle                    = Double
type Radius                   = Double

startingDelta   = 10
finalDelta      = 0.0001
reduceDelta     = (\x -> x / 10)
movesPerCircle  = 6
finalCost       = 0.1

-- ps: points to be fitted to
-- cf: cost function
-- con: conditition under which to yield current function
fit :: [Point] -> CostFunction -> Condition -> [Coefficient]
fit ps cf con = refineFit ps cf con [0]

-- ps: points to be fitted to
-- cf: cost function
-- con: conditition under which to yield current function
-- coefs: coefficients of current power series function
refineFit :: [Point] -> CostFunction -> Condition
             -> [Coefficient] -> [Coefficient]
refineFit ps cf con coefs
  | con coefs = coefs
  | otherwise = refineFit ps cf con $ minimizeCost ps cf (coefs ++ [0])
                                                   startingDelta
                                                   finalDelta

-- ps: points to be fitted to
-- cf: cost function
-- coefs: coefficients of current polynomial function
-- sa: starting delta for optimization moves
-- fa: final delta for optimization moves
minimizeCost :: [Point] -> CostFunction -> [Coefficient]
                -> Double -> Double -> [Coefficient]
minimizeCost ps cf coefs sd fd
  -- base case: starting delta is less than the final delta
  | sd < fd = coefs
  -- base case: at a local minima for the current increment
  | (cf $ ctof coefs) <= (cf $ ctof coefs)
    = minimizeCost ps cf coefs (reduceDelta sd) fd
  -- otherwise, recurse on the minimum cost move
  | otherwise = minimizeCost ps cf newCoefs sd fd
    -- where newCoefs = zipWith (+) coefs $ map negate $ grad (cf . ctof) coefs
    where
      newCoefs :: [Coefficient]
      newCoefs = zipWith (+) coefs $ map negate $ grad (\cs -> (sum $ map (\(x,y) -> (y - (ctof cs x))^2) auto ps) . ctof) coefs
      -- cost :: [Double] -> Double
      -- cost = cf . ctof

cost = sum

-- coefficients to function
-- cs: coefficients of the polynomial function
ctof :: [Coefficient] -> Function
ctof [] x = 0
ctof cs x = ((last cs) * x^((length cs) - 1)) + ((ctof (init cs)) x)

-- ps: points
-- f: function to find cost of
defaultCostFunction :: [Point] -> Function -> Cost
defaultCostFunction ps f = sum $ map (\(x,y) -> (y - (f x))^2) ps

-- cf: cost function
-- mc: max cost of the final function
defaultCondition :: CostFunction -> Cost -> [Coefficient] -> Bool
defaultCondition cf mc = (< mc) . cf . ctof

-- alternative conditions:
-- - number of coefficients,
-- - significance of last coefficient as compared to the one preceding it
--   (has significant issues, eg slowly decending significance,
--    trignometric functions etc.)

defaultFit :: [Point] -> [Coefficient]
defaultFit ps = fit ps cf con
  where cf = defaultCostFunction ps
        con = defaultCondition cf finalCost

main :: IO ()
main = putStrLn $ show $ defaultFit [(x,(sin x)) | x <- [0,(pi/6)..(2*pi)]]
